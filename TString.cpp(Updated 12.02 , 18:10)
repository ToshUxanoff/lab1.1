#include "stdafx.h"
#include "TString.h"

int Strlen(const char* str) 
{
	int len = 0;
	for (int i = 0; str[i] != 0; i++)
	{
		len++;
	}

	return len;
}

char* Strcpy(char*d, const char* s)
{
	char* start = d;
	while (*d++ = *s++)
	{

	}
	return start;
}
	//Method SIZE//
	size_t TString::Size() const
	{
		int len = 0;
		for (int i = 0; this->Data[i] != 0; i++)
		{
			len++;
		}

		return len;
	}

	//default ctor//
	TString::TString()
	{	
		Data = "";
	}
	//user ctor char*//
	TString::TString(const char * str1)
	{
		Data = new char[Strlen(str1) + 1];
		Strcpy(Data, str1);

	}
	//copy ctor//
	TString::TString(const TString& object)

	{
		Data = new char[Strlen(object.Data) + 1];
		Strcpy(Data, object.Data);
	}
	//dtor//
	TString::~TString()
	{
		if (Data != "")
		{
			delete[] Data;
		}
	}
	TString& TString:: operator=(const TString& object)
	{
		if (Data == "")
		{
			Data = new char[Strlen(object.Data) + 1];
			strcpy(Data, object.Data);
		}
		if (this != &object)
		{
			delete[]Data;
			Data = new char[Strlen(object.Data) + 1];
			strcpy(Data, object.Data);
		}
		return *this;
	}
	TString& TString::operator+=(const TString &object)
	{
		int len1 = Size();
		int len2 = object.Size();
		char *str = new char[len1 + len2 + 1];
		for (int i = 0; i < len1; i++)
		{
			str[i] = Data[i];
		}	
		for (int i = 0; i <= len2; i++)
		{
			str[len1 + i] = object.Data[i];
		}		
		delete[] Data;
		Data = str;
		return *this;
	}
	TString operator+(const TString & a, const TString & b)
	{
		TString str(a);
		str += b;
		return str;
	}

	bool TString::operator ==(const TString &object) const
	{
		int size1 = Size();
		int size2 = object.Size();
		if (size1 != size2)
		{
			return false;
		}
		int i = 0;
		while (Data[i] == object.Data[i] && Data[i] != '\0' && object.Data[i] != '\0')
		{
			i++;
		}
		if (i == size1)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	bool operator!=(const TString & a, const TString & b)
	{
		int x = 0;
		int size1 = a.Size();
		int size2 = b.Size();
		if (size1 != size2)
		{
			return true;
		}
		for (int i = 0; a[i] == b[i]; i++)
		{
			x++;
		}
		if ( x == size1)
		{
			return false;
		}
		else
		{
			return true;
		}
	}
	bool TString::operator < (const TString& object) const
	{
		return(Size() < Strlen(object.Data) ? true : false);
	}
	bool operator>(const TString & a, const TString & b)
	{
		TString str1(a);
		TString str2(b);
		return(str1.Size() > str2.Size() ? true : false);
	}
	char TString::operator[](size_t index) const
	{
		if (index > Size())
		{
			std::cout << "Error";
			return 0;
		}
		else
		{
			std::cout << "\n You want to found " << index << " symbol in this string: " << this->Data << "\n Founded Symbol: ";
			return this->Data[index];
		}

	}
	char& TString::operator[](size_t index)
	{
		if (index > Size())
		{
			std::cout << "Error";
			
		}
		else
		{
			return this->Data[index];
		}
	}
	//Replace func
	void TString::Replace(char oldSym, char newSym)
	{
		for (int i = 0; i < Size(); i++)
		{
			if (this->Data[i] == oldSym)
			{

				Data[i] = newSym;
			}
		}
	}
	bool TString::Empty() const
	{
		if (Strlen(Data) == 0)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	//TRIMS
	void TString::LTrim(char symbol)
	{

		bool find = false;
		int a = 0;
		char * str_new = new char[Size()];
		int i = 0;



		for (int i = 0; i < Size(); i++)
		{
			if (this->Data[i] == symbol)
			{
				a++;
			}
			else
			{
				break;

			}
		}
		int c = a;
		for (int i = 0; i < Size() - c; a++, i++)
		{
			str_new[i] = this->Data[a];
		}

		str_new[Size() - c] = '\0';
		this->Data = str_new;
	}
	void TString::RTrim(char symbol)
	{
		int size = Size();
		int a = 0;
		int j = 0;
		for (int i = 0; i < size; i++)
		{
			 j = size - i;
			if (this->Data[j] != symbol)
			{
				a++;
				Data[j-1] = '\0';
				break;
			}

		}
	}
	//Find func
	size_t TString::Find(const TString& object) const
	{
		int ret = 0;
		int check = 0;
		for (int i = 0; i < Size(); i++)
		{
			if (this->Data[i] == object.Data[0])
			{
				check++;
				ret = i;
				for (int j = 1; j < Strlen(object.Data); j++)
				{
					i++;
					if (this->Data[i] == object.Data[j])
					{
						check++;
					}
					else
					{
						check = 0;
						break;
					}
				}
			}
		}
		if (check == Strlen(object.Data))
		{
			return ret;
		}
		else
		{
			return -1;
		}

	}
	
	std::ostream & operator<<(std::ostream &out, const TString & object)
	{
		out << object.Data;
		return out;
	}
